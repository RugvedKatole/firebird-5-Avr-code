
fb5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000011ac  00001240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800202  00800202  00001242  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001041  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d09  00000000  00000000  000022f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000578  00000000  00000000  00002ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  00003578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000762  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d0  00000000  00000000  000040b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_5>
      18:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_45>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec ea       	ldi	r30, 0xAC	; 172
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 30       	cpi	r26, 0x02	; 2
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a2 e0       	ldi	r26, 0x02	; 2
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 32       	cpi	r26, 0x2A	; 42
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b2 05 	call	0xb64	; 0xb64 <main>
     122:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <buzzer_pin_config>:
float BATT_Voltage, BATT_V;

//buzzer is connected to PORTC 3 pin of Microcontroller
//PORTC 3 pin is configured as output with the initial state set at logic 0 to keep the buzzer off.
void buzzer_pin_config (void)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
DDRC = DDRC | 0x08;     //setting PORTC 3 as output
     132:	87 e2       	ldi	r24, 0x27	; 39
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	27 e2       	ldi	r18, 0x27	; 39
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	f9 01       	movw	r30, r18
     13c:	20 81       	ld	r18, Z
     13e:	28 60       	ori	r18, 0x08	; 8
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
PORTC = PORTC & 0xF7;	//setting PORTC 3 logic low to turnoff buzzer
     144:	88 e2       	ldi	r24, 0x28	; 40
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	28 e2       	ldi	r18, 0x28	; 40
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	f9 01       	movw	r30, r18
     14e:	20 81       	ld	r18, Z
     150:	27 7f       	andi	r18, 0xF7	; 247
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
}
     156:	00 00       	nop
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <LED_bargraph_config>:

// Bargraph LEDs are connected to PORTJ of MCU'
void LED_bargraph_config (void)
{
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
DDRJ = 0xFF; //PORT J is configured as output
     166:	84 e0       	ldi	r24, 0x04	; 4
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	2f ef       	ldi	r18, 0xFF	; 255
     16c:	fc 01       	movw	r30, r24
     16e:	20 83       	st	Z, r18
PORTJ = 0x00; //Output is set to 0
     170:	85 e0       	ldi	r24, 0x05	; 5
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	fc 01       	movw	r30, r24
     176:	10 82       	st	Z, r1
}
     178:	00 00       	nop
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <motion_pin_config>:

void motion_pin_config (void)
{
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;			// refer table 3.3 hardware manual	
     188:	81 e2       	ldi	r24, 0x21	; 33
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	21 e2       	ldi	r18, 0x21	; 33
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	f9 01       	movw	r30, r18
     192:	20 81       	ld	r18, Z
     194:	2f 60       	ori	r18, 0x0F	; 15
     196:	fc 01       	movw	r30, r24
     198:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
     19a:	82 e2       	ldi	r24, 0x22	; 34
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	22 e2       	ldi	r18, 0x22	; 34
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	f9 01       	movw	r30, r18
     1a4:	20 81       	ld	r18, Z
     1a6:	20 7f       	andi	r18, 0xF0	; 240
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;		//Setting PL3 and PL4 pins as output for PWM generation
     1ac:	8a e0       	ldi	r24, 0x0A	; 10
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	2a e0       	ldi	r18, 0x0A	; 10
     1b2:	31 e0       	ldi	r19, 0x01	; 1
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	28 61       	ori	r18, 0x18	; 24
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18;		//PL3 and PL4 pins are for velocity control using PWM.
     1be:	8b e0       	ldi	r24, 0x0B	; 11
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	2b e0       	ldi	r18, 0x0B	; 11
     1c4:	31 e0       	ldi	r19, 0x01	; 1
     1c6:	f9 01       	movw	r30, r18
     1c8:	20 81       	ld	r18, Z
     1ca:	28 61       	ori	r18, 0x18	; 24
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 83       	st	Z, r18
}
     1d0:	00 00       	nop
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; //set PORTF direction as input
     1e0:	80 e3       	ldi	r24, 0x30	; 48
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	fc 01       	movw	r30, r24
     1e6:	10 82       	st	Z, r1
 PORTF = 0x00; //set PORTF pins floating
     1e8:	81 e3       	ldi	r24, 0x31	; 49
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	fc 01       	movw	r30, r24
     1ee:	10 82       	st	Z, r1
 DDRK = 0x00; //set PORTK direction as input
     1f0:	87 e0       	ldi	r24, 0x07	; 7
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	fc 01       	movw	r30, r24
     1f6:	10 82       	st	Z, r1
 PORTK = 0x00; //set PORTK pins floating
     1f8:	88 e0       	ldi	r24, 0x08	; 8
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	fc 01       	movw	r30, r24
     1fe:	10 82       	st	Z, r1
}
     200:	00 00       	nop
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
	 DDRE  = DDRE & 0xEF;			//Set the direction of the PORTE 4 pin as input
     210:	8d e2       	ldi	r24, 0x2D	; 45
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	2d e2       	ldi	r18, 0x2D	; 45
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	f9 01       	movw	r30, r18
     21a:	20 81       	ld	r18, Z
     21c:	2f 7e       	andi	r18, 0xEF	; 239
     21e:	fc 01       	movw	r30, r24
     220:	20 83       	st	Z, r18
	 PORTE = PORTE | 0x10;			//Enable internal pull-up for PORTE 4 pin
     222:	8e e2       	ldi	r24, 0x2E	; 46
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	2e e2       	ldi	r18, 0x2E	; 46
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	20 61       	ori	r18, 0x10	; 16
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
}
     234:	00 00       	nop
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
	 DDRE  = DDRE & 0xDF;			//Set the direction of the PORTE 4 pin as input
     244:	8d e2       	ldi	r24, 0x2D	; 45
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	2d e2       	ldi	r18, 0x2D	; 45
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	2f 7d       	andi	r18, 0xDF	; 223
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	 PORTE = PORTE | 0x20;			//Enable internal pull-up for PORTE 4 pin
     256:	8e e2       	ldi	r24, 0x2E	; 46
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	2e e2       	ldi	r18, 0x2E	; 46
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	20 62       	ori	r18, 0x20	; 32
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
}
     268:	00 00       	nop
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <interrupt_switch_config>:

//Function to configure Interrupt switch
void interrupt_switch_config (void)
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
 DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input  
     278:	8d e2       	ldi	r24, 0x2D	; 45
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	2d e2       	ldi	r18, 0x2D	; 45
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	2f 77       	andi	r18, 0x7F	; 127
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
 PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
     28a:	8e e2       	ldi	r24, 0x2E	; 46
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2e e2       	ldi	r18, 0x2E	; 46
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	20 68       	ori	r18, 0x80	; 128
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
}
     29c:	00 00       	nop
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <port_init>:


//Function to initialize ports
void port_init()
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
     2ac:	0e 94 c0 00 	call	0x180	; 0x180 <motion_pin_config>
	left_encoder_pin_config();			//left encoder pin config
     2b0:	0e 94 04 01 	call	0x208	; 0x208 <left_encoder_pin_config>
    right_encoder_pin_config();			//right encoder pin config	
     2b4:	0e 94 1e 01 	call	0x23c	; 0x23c <right_encoder_pin_config>
	buzzer_pin_config();
     2b8:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_pin_config>
	LED_bargraph_config();
     2bc:	0e 94 af 00 	call	0x15e	; 0x15e <LED_bargraph_config>
	adc_pin_config();
     2c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <adc_pin_config>
	interrupt_switch_config();
     2c4:	0e 94 38 01 	call	0x270	; 0x270 <interrupt_switch_config>
}
     2c8:	00 00       	nop
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <adc_init>:

//Function to Initialize ADC
void adc_init()
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     2d8:	8a e7       	ldi	r24, 0x7A	; 122
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	fc 01       	movw	r30, r24
     2de:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     2e0:	8b e7       	ldi	r24, 0x7B	; 123
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	fc 01       	movw	r30, r24
     2e6:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     2e8:	8c e7       	ldi	r24, 0x7C	; 124
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	20 e2       	ldi	r18, 0x20	; 32
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
	ACSR = 0x80;
     2f2:	80 e5       	ldi	r24, 0x50	; 80
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	20 e8       	ldi	r18, 0x80	; 128
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     2fc:	8a e7       	ldi	r24, 0x7A	; 122
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	26 e8       	ldi	r18, 0x86	; 134
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
}
     306:	00 00       	nop
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	1f 92       	push	r1
     314:	1f 92       	push	r1
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
     31c:	8a 81       	ldd	r24, Y+2	; 0x02
     31e:	88 30       	cpi	r24, 0x08	; 8
     320:	28 f0       	brcs	.+10     	; 0x32c <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
     322:	8b e7       	ldi	r24, 0x7B	; 123
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	28 e0       	ldi	r18, 0x08	; 8
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;  			
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	87 70       	andi	r24, 0x07	; 7
     330:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
     332:	8c e7       	ldi	r24, 0x7C	; 124
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	2a 81       	ldd	r18, Y+2	; 0x02
     338:	20 62       	ori	r18, 0x20	; 32
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     33e:	8a e7       	ldi	r24, 0x7A	; 122
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2a e7       	ldi	r18, 0x7A	; 122
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	f9 01       	movw	r30, r18
     348:	20 81       	ld	r18, Z
     34a:	20 64       	ori	r18, 0x40	; 64
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     350:	00 00       	nop
     352:	8a e7       	ldi	r24, 0x7A	; 122
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	fc 01       	movw	r30, r24
     358:	80 81       	ld	r24, Z
     35a:	88 2f       	mov	r24, r24
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	80 71       	andi	r24, 0x10	; 16
     360:	99 27       	eor	r25, r25
     362:	89 2b       	or	r24, r25
     364:	b1 f3       	breq	.-20     	; 0x352 <ADC_Conversion+0x44>
	a=ADCH;
     366:	89 e7       	ldi	r24, 0x79	; 121
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	fc 01       	movw	r30, r24
     36c:	80 81       	ld	r24, Z
     36e:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     370:	8a e7       	ldi	r24, 0x7A	; 122
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	2a e7       	ldi	r18, 0x7A	; 122
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	f9 01       	movw	r30, r18
     37a:	20 81       	ld	r18, Z
     37c:	20 61       	ori	r18, 0x10	; 16
     37e:	fc 01       	movw	r30, r24
     380:	20 83       	st	Z, r18
	ADCSRB = 0x00;
     382:	8b e7       	ldi	r24, 0x7B	; 123
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	fc 01       	movw	r30, r24
     388:	10 82       	st	Z, r1
	return a;
     38a:	89 81       	ldd	r24, Y+1	; 0x01
}
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <Sharp_GP2D120_estimation>:

// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor. range 40 mm to 300 mm
unsigned int Sharp_GP2D120_estimation(unsigned char adc_reading)
{
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	27 97       	sbiw	r28, 0x07	; 7
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(1/(0.001240875*adc_reading + 0.005)));
     3ac:	8f 81       	ldd	r24, Y+7	; 0x07
     3ae:	88 2f       	mov	r24, r24
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	09 2e       	mov	r0, r25
     3b4:	00 0c       	add	r0, r0
     3b6:	aa 0b       	sbc	r26, r26
     3b8:	bb 0b       	sbc	r27, r27
     3ba:	bc 01       	movw	r22, r24
     3bc:	cd 01       	movw	r24, r26
     3be:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatsisf>
     3c2:	dc 01       	movw	r26, r24
     3c4:	cb 01       	movw	r24, r22
     3c6:	2b ed       	ldi	r18, 0xDB	; 219
     3c8:	34 ea       	ldi	r19, 0xA4	; 164
     3ca:	42 ea       	ldi	r20, 0xA2	; 162
     3cc:	5a e3       	ldi	r21, 0x3A	; 58
     3ce:	bc 01       	movw	r22, r24
     3d0:	cd 01       	movw	r24, r26
     3d2:	0e 94 67 08 	call	0x10ce	; 0x10ce <__mulsf3>
     3d6:	dc 01       	movw	r26, r24
     3d8:	cb 01       	movw	r24, r22
     3da:	2a e0       	ldi	r18, 0x0A	; 10
     3dc:	37 ed       	ldi	r19, 0xD7	; 215
     3de:	43 ea       	ldi	r20, 0xA3	; 163
     3e0:	5b e3       	ldi	r21, 0x3B	; 59
     3e2:	bc 01       	movw	r22, r24
     3e4:	cd 01       	movw	r24, r26
     3e6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__addsf3>
     3ea:	dc 01       	movw	r26, r24
     3ec:	cb 01       	movw	r24, r22
     3ee:	9c 01       	movw	r18, r24
     3f0:	ad 01       	movw	r20, r26
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	80 e8       	ldi	r24, 0x80	; 128
     3f8:	9f e3       	ldi	r25, 0x3F	; 63
     3fa:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__divsf3>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e2       	ldi	r20, 0x20	; 32
     408:	51 e4       	ldi	r21, 0x41	; 65
     40a:	bc 01       	movw	r22, r24
     40c:	cd 01       	movw	r24, r26
     40e:	0e 94 67 08 	call	0x10ce	; 0x10ce <__mulsf3>
     412:	dc 01       	movw	r26, r24
     414:	cb 01       	movw	r24, r22
     416:	bc 01       	movw	r22, r24
     418:	cd 01       	movw	r24, r26
     41a:	0e 94 7f 07 	call	0xefe	; 0xefe <__fixsfsi>
     41e:	dc 01       	movw	r26, r24
     420:	cb 01       	movw	r24, r22
     422:	09 2e       	mov	r0, r25
     424:	00 0c       	add	r0, r0
     426:	aa 0b       	sbc	r26, r26
     428:	bb 0b       	sbc	r27, r27
     42a:	bc 01       	movw	r22, r24
     42c:	cd 01       	movw	r24, r26
     42e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatsisf>
     432:	dc 01       	movw	r26, r24
     434:	cb 01       	movw	r24, r22
     436:	8b 83       	std	Y+3, r24	; 0x03
     438:	9c 83       	std	Y+4, r25	; 0x04
     43a:	ad 83       	std	Y+5, r26	; 0x05
     43c:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
     43e:	6b 81       	ldd	r22, Y+3	; 0x03
     440:	7c 81       	ldd	r23, Y+4	; 0x04
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	9e 81       	ldd	r25, Y+6	; 0x06
     446:	0e 94 7f 07 	call	0xefe	; 0xefe <__fixsfsi>
     44a:	dc 01       	movw	r26, r24
     44c:	cb 01       	movw	r24, r22
     44e:	9a 83       	std	Y+2, r25	; 0x02
     450:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	9a 81       	ldd	r25, Y+2	; 0x02
     456:	81 32       	cpi	r24, 0x21	; 33
     458:	93 40       	sbci	r25, 0x03	; 3
     45a:	20 f0       	brcs	.+8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	{
		distanceInt=800;
     45c:	80 e2       	ldi	r24, 0x20	; 32
     45e:	93 e0       	ldi	r25, 0x03	; 3
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
}
     468:	27 96       	adiw	r28, 0x07	; 7
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <left_position_encoder_interrupt_init>:


// Function to enable Interrupt 4
void left_position_encoder_interrupt_init (void) 
{
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
	 cli();						// Clears the global interrupt
     482:	f8 94       	cli
	 EICRB = EICRB | 0x02;		// INT4 is set to trigger with falling edge
     484:	8a e6       	ldi	r24, 0x6A	; 106
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	2a e6       	ldi	r18, 0x6A	; 106
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	f9 01       	movw	r30, r18
     48e:	20 81       	ld	r18, Z
     490:	22 60       	ori	r18, 0x02	; 2
     492:	fc 01       	movw	r30, r24
     494:	20 83       	st	Z, r18
	 EIMSK = EIMSK | 0x10;		// Enable Interrupt INT4 for left position encoder
     496:	8d e3       	ldi	r24, 0x3D	; 61
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	2d e3       	ldi	r18, 0x3D	; 61
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	20 61       	ori	r18, 0x10	; 16
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
	 sei();						// Enables the global interrupt 
     4a8:	78 94       	sei
}
     4aa:	00 00       	nop
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <right_position_encoder_interrupt_init>:

// Function to enable Interrupt 5
void right_position_encoder_interrupt_init (void) 
{
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
	 cli();						// Clears the global interrupt
     4ba:	f8 94       	cli
	 EICRB = EICRB | 0x08;		// INT5 is set to trigger with falling edge
     4bc:	8a e6       	ldi	r24, 0x6A	; 106
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	2a e6       	ldi	r18, 0x6A	; 106
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	f9 01       	movw	r30, r18
     4c6:	20 81       	ld	r18, Z
     4c8:	28 60       	ori	r18, 0x08	; 8
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 83       	st	Z, r18
	 EIMSK = EIMSK | 0x20;		// Enable Interrupt INT5 for right position encoder
     4ce:	8d e3       	ldi	r24, 0x3D	; 61
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	2d e3       	ldi	r18, 0x3D	; 61
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	f9 01       	movw	r30, r18
     4d8:	20 81       	ld	r18, Z
     4da:	20 62       	ori	r18, 0x20	; 32
     4dc:	fc 01       	movw	r30, r24
     4de:	20 83       	st	Z, r18
	 sei();						// Enables the global interrupt 
     4e0:	78 94       	sei
}
     4e2:	00 00       	nop
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     4f2:	81 e2       	ldi	r24, 0x21	; 33
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	fc 01       	movw	r30, r24
     4f8:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     4fa:	85 e2       	ldi	r24, 0x25	; 37
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     504:	84 e2       	ldi	r24, 0x24	; 36
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	21 e0       	ldi	r18, 0x01	; 1
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     50e:	89 e2       	ldi	r24, 0x29	; 41
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	fc 01       	movw	r30, r24
     514:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     516:	88 e2       	ldi	r24, 0x28	; 40
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     520:	8b e2       	ldi	r24, 0x2B	; 43
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	fc 01       	movw	r30, r24
     526:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     528:	8a e2       	ldi	r24, 0x2A	; 42
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	2f ef       	ldi	r18, 0xFF	; 255
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     532:	8d e2       	ldi	r24, 0x2D	; 45
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	fc 01       	movw	r30, r24
     538:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     53a:	8c e2       	ldi	r24, 0x2C	; 44
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	2f ef       	ldi	r18, 0xFF	; 255
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     544:	80 e2       	ldi	r24, 0x20	; 32
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	29 ea       	ldi	r18, 0xA9	; 169
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
	For Overriding normal port functionality to OCRnA outputs.
	{WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     54e:	81 e2       	ldi	r24, 0x21	; 33
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	2b e0       	ldi	r18, 0x0B	; 11
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
}
     558:	00 00       	nop
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	1f 92       	push	r1
     566:	1f 92       	push	r1
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     570:	88 e2       	ldi	r24, 0x28	; 40
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
     57a:	8a e2       	ldi	r24, 0x2A	; 42
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	2a 81       	ldd	r18, Y+2	; 0x02
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
}
     584:	00 00       	nop
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00;		//disable while setting baud rate
     598:	81 ed       	ldi	r24, 0xD1	; 209
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	fc 01       	movw	r30, r24
     59e:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     5a0:	80 ed       	ldi	r24, 0xD0	; 208
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	10 82       	st	Z, r1
 UCSR2C = 0x06;
     5a8:	82 ed       	ldi	r24, 0xD2	; 210
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	26 e0       	ldi	r18, 0x06	; 6
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
 UBRR2L = 0x5F;		//set baud rate lo
     5b2:	84 ed       	ldi	r24, 0xD4	; 212
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	2f e5       	ldi	r18, 0x5F	; 95
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
 UBRR2H = 0x00;		//set baud rate hi
     5bc:	85 ed       	ldi	r24, 0xD5	; 213
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	fc 01       	movw	r30, r24
     5c2:	10 82       	st	Z, r1
 UCSR2B = 0x98;
     5c4:	81 ed       	ldi	r24, 0xD1	; 209
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	28 e9       	ldi	r18, 0x98	; 152
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
}
     5ce:	00 00       	nop
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <__vector_51>:


ISR(USART2_RX_vect)		// ISR for receive complete interrupt
{	/*********************************************************************************
     5d6:	1f 92       	push	r1
     5d8:	0f 92       	push	r0
     5da:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     5e6:	0f 92       	push	r0
     5e8:	2f 93       	push	r18
     5ea:	3f 93       	push	r19
     5ec:	4f 93       	push	r20
     5ee:	5f 93       	push	r21
     5f0:	6f 93       	push	r22
     5f2:	7f 93       	push	r23
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	af 93       	push	r26
     5fa:	bf 93       	push	r27
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
	We will take four bytes of data at a time ,t,he first is an escape character 0x7E.
	This is followed by a direction character 8,6,4,2,5 for F,R,L,B,Stop respectively.
	Final two bytes indicating the PWM input to each motor.
	*********************************************************************************/
	incomingByte = UDR2; 
     608:	86 ed       	ldi	r24, 0xD6	; 214
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	80 81       	ld	r24, Z
     610:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <incomingByte>
	d[packet_cnt]=incomingByte;
     614:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <packet_cnt>
     618:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <packet_cnt+0x1>
     61c:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <incomingByte>
     620:	8d 5d       	subi	r24, 0xDD	; 221
     622:	9d 4f       	sbci	r25, 0xFD	; 253
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
	//UDR2=incomingByte;
	packet_cnt++;
     628:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <packet_cnt>
     62c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <packet_cnt+0x1>
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <packet_cnt+0x1>
     636:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <packet_cnt>
	if (d[0]!='A')
     63a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <d>
     63e:	81 34       	cpi	r24, 0x41	; 65
     640:	21 f0       	breq	.+8      	; 0x64a <__vector_51+0x74>
	packet_cnt=0; 
     642:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <packet_cnt+0x1>
     646:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <packet_cnt>
	//UDR2=packet_cnt;
	if( packet_cnt>=packet_len && d[0]=='A')
     64a:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <packet_cnt>
     64e:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <packet_cnt+0x1>
     652:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     656:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     65a:	28 17       	cp	r18, r24
     65c:	39 07       	cpc	r19, r25
     65e:	0c f4       	brge	.+2      	; 0x662 <__vector_51+0x8c>
     660:	50 c0       	rjmp	.+160    	; 0x702 <__vector_51+0x12c>
     662:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <d>
     666:	81 34       	cpi	r24, 0x41	; 65
     668:	09 f0       	breq	.+2      	; 0x66c <__vector_51+0x96>
     66a:	4b c0       	rjmp	.+150    	; 0x702 <__vector_51+0x12c>
	{
		packet_cnt=0;	
     66c:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <packet_cnt+0x1>
     670:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <packet_cnt>
		velocity((int)d[2],(int)d[3]);													  
     674:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <d+0x3>
     678:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <d+0x2>
     67c:	69 2f       	mov	r22, r25
     67e:	0e 94 b0 02 	call	0x560	; 0x560 <velocity>
		if(d[1] == 0x38) //ASCII for '8'	//ASCII value of 8
     682:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <d+0x1>
     686:	88 33       	cpi	r24, 0x38	; 56
     688:	59 f4       	brne	.+22     	; 0x6a0 <__vector_51+0xca>
		{
			PORTA=0x06;															//forward
     68a:	82 e2       	ldi	r24, 0x22	; 34
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	26 e0       	ldi	r18, 0x06	; 6
     690:	fc 01       	movw	r30, r24
     692:	20 83       	st	Z, r18
			//Both wheels move forward
			FBL_Flag=1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <FBL_Flag>
			FBR_Flag=1;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
		}

		if(d[1] == 0x32) //ASCII for '2'	//ASCII value of 2
     6a0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <d+0x1>
     6a4:	82 33       	cpi	r24, 0x32	; 50
     6a6:	49 f4       	brne	.+18     	; 0x6ba <__vector_51+0xe4>
		{
			PORTA=0x09;															//back
     6a8:	82 e2       	ldi	r24, 0x22	; 34
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	29 e0       	ldi	r18, 0x09	; 9
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
			//Both wheels move back.
			FBL_Flag=0;
     6b2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <FBL_Flag>
			FBR_Flag=0;
     6b6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
		}

		if(d[1] == 0x34) //ASCII for '4'		//ASCII value of 4
     6ba:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <d+0x1>
     6be:	84 33       	cpi	r24, 0x34	; 52
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__vector_51+0x100>
		{
			PORTA=0x05;															//left
     6c2:	82 e2       	ldi	r24, 0x22	; 34
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	25 e0       	ldi	r18, 0x05	; 5
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
			//Right wheel should move with forward and LEft backward for perfect left turn.
			FBL_Flag=0;
     6cc:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <FBL_Flag>
			FBR_Flag=1;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
		}

		if(d[1] == 0x36) //ASCII for '6' //ASCII value of 6
     6d6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <d+0x1>
     6da:	86 33       	cpi	r24, 0x36	; 54
     6dc:	51 f4       	brne	.+20     	; 0x6f2 <__vector_51+0x11c>
		{
			PORTA=0x0A;															//right
     6de:	82 e2       	ldi	r24, 0x22	; 34
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	2a e0       	ldi	r18, 0x0A	; 10
     6e4:	fc 01       	movw	r30, r24
     6e6:	20 83       	st	Z, r18
			//Left wheel should move with forward and right backward for perfect right turn..
			FBL_Flag=1;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <FBL_Flag>
			FBR_Flag=0;
     6ee:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
		}

		if(d[1] == 0x35) //ASCII for '5'	//ASCII value of 5
     6f2:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <d+0x1>
     6f6:	85 33       	cpi	r24, 0x35	; 53
     6f8:	21 f4       	brne	.+8      	; 0x702 <__vector_51+0x12c>
		{
			PORTA=0x00;					//stop
     6fa:	82 e2       	ldi	r24, 0x22	; 34
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	10 82       	st	Z, r1
		}
	}

}
     702:	00 00       	nop
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	ff 91       	pop	r31
     70a:	ef 91       	pop	r30
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	7f 91       	pop	r23
     716:	6f 91       	pop	r22
     718:	5f 91       	pop	r21
     71a:	4f 91       	pop	r20
     71c:	3f 91       	pop	r19
     71e:	2f 91       	pop	r18
     720:	0f 90       	pop	r0
     722:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     726:	0f 90       	pop	r0
     728:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <timer4_init>:
//Interrupt which runs every 100 ms. We use this to send data of the current encoder position.

void timer4_init(void)
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
 TCCR4B = 0x00; //stop
     73a:	81 ea       	ldi	r24, 0xA1	; 161
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	fc 01       	movw	r30, r24
     740:	10 82       	st	Z, r1
 TCNT4H = 0xF7; //247 //Counter higher 8 bit value
     742:	85 ea       	ldi	r24, 0xA5	; 165
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	27 ef       	ldi	r18, 0xF7	; 247
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
 TCNT4L = 0x00; //0+247*256 = 63232 to reach 65535 we need 2303 counts.
     74c:	84 ea       	ldi	r24, 0xA4	; 164
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	fc 01       	movw	r30, r24
     752:	10 82       	st	Z, r1
 OCR4AH = 0x00; //Output Compair Register (OCR)- Not used Since TIMSK=0x01 we only use the overflow counter.
     754:	89 ea       	ldi	r24, 0xA9	; 169
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	fc 01       	movw	r30, r24
     75a:	10 82       	st	Z, r1
 OCR4AL = 0x00; //Output Compair Register (OCR)- Not used
     75c:	88 ea       	ldi	r24, 0xA8	; 168
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	fc 01       	movw	r30, r24
     762:	10 82       	st	Z, r1
 OCR4BH = 0x00; //Output Compair Register (OCR)- Not used
     764:	8b ea       	ldi	r24, 0xAB	; 171
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	fc 01       	movw	r30, r24
     76a:	10 82       	st	Z, r1
 OCR4BL = 0x00; //Output Compair Register (OCR)- Not used
     76c:	8a ea       	ldi	r24, 0xAA	; 170
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	fc 01       	movw	r30, r24
     772:	10 82       	st	Z, r1
 OCR4CH = 0x00; //Output Compair Register (OCR)- Not used
     774:	8d ea       	ldi	r24, 0xAD	; 173
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	fc 01       	movw	r30, r24
     77a:	10 82       	st	Z, r1
 OCR4CL = 0x00; //Output Compair Register (OCR)- Not used
     77c:	8c ea       	ldi	r24, 0xAC	; 172
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	10 82       	st	Z, r1
 ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     784:	87 ea       	ldi	r24, 0xA7	; 167
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	fc 01       	movw	r30, r24
     78a:	10 82       	st	Z, r1
 ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     78c:	86 ea       	ldi	r24, 0xA6	; 166
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	fc 01       	movw	r30, r24
     792:	10 82       	st	Z, r1
 TCCR4A = 0x00; //This ensures normal mode as WGM0,1 are both 0. In addition WGM2 in in TCCR4B (in the 4th bit from right) is also 0
     794:	80 ea       	ldi	r24, 0xA0	; 160
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	fc 01       	movw	r30, r24
     79a:	10 82       	st	Z, r1
 TCCR4C = 0x00; //Just set to zero for now.
     79c:	82 ea       	ldi	r24, 0xA2	; 162
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	fc 01       	movw	r30, r24
     7a2:	10 82       	st	Z, r1
 TCCR4B = 0x04; //start Timer 0x04. Prescaler is 64 for CS0:2 set to 011. 14745600/64=230400  
     7a4:	81 ea       	ldi	r24, 0xA1	; 161
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	24 e0       	ldi	r18, 0x04	; 4
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
}
     7ae:	00 00       	nop
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
 cli();				//Clears the global interrupts
     7be:	f8 94       	cli
 port_init();		//Initializes all the ports
     7c0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <port_init>
 uart2_init();		//Initailize UART2 for serial communiaction
     7c4:	0e 94 c8 02 	call	0x590	; 0x590 <uart2_init>
 adc_init();
     7c8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <adc_init>
 timer5_init();
     7cc:	0e 94 75 02 	call	0x4ea	; 0x4ea <timer5_init>
 timer4_init();
     7d0:	0e 94 99 03 	call	0x732	; 0x732 <timer4_init>
 TIMSK4 = 0x01;    //Enables the overflow interrupt.
     7d4:	82 e7       	ldi	r24, 0x72	; 114
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
 left_position_encoder_interrupt_init();
     7de:	0e 94 3d 02 	call	0x47a	; 0x47a <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
     7e2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <right_position_encoder_interrupt_init>
 sei();				//Enables the global interrupts
     7e6:	78 94       	sei
}
     7e8:	00 00       	nop
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <USART_Transmit>:

//If this doesn't work then an interrupt can also be used. Refer page 106 of Software Manual
void USART_Transmit( unsigned char data )										
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	1f 92       	push	r1
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	89 83       	std	Y+1, r24	; 0x01
/* Wait for empty transmit buffer*/
while( !( UCSR2A & (1<<UDRE2)) )
     7fc:	00 00       	nop
     7fe:	80 ed       	ldi	r24, 0xD0	; 208
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	fc 01       	movw	r30, r24
     804:	80 81       	ld	r24, Z
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	80 72       	andi	r24, 0x20	; 32
     80c:	99 27       	eor	r25, r25
     80e:	89 2b       	or	r24, r25
     810:	b1 f3       	breq	.-20     	; 0x7fe <USART_Transmit+0xe>
;
/* Put data into buffer, sends the data*/
UDR2 = data;
     812:	86 ed       	ldi	r24, 0xD6	; 214
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	29 81       	ldd	r18, Y+1	; 0x01
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
}
     81c:	00 00       	nop
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <__vector_45>:


ISR(TIMER4_OVF_vect)
{
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     82e:	0f 92       	push	r0
     830:	11 24       	eor	r1, r1
     832:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     836:	0f 92       	push	r0
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	1f 92       	push	r1
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
char chksum;
TCCR4B = 0x00;			//Stops clock.
     85a:	81 ea       	ldi	r24, 0xA1	; 161
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	10 82       	st	Z, r1
/*Apparently gives 0.2s gap or 5Hz. Should have been 20Hz */
//TCNT4H = 0xD2; 		//210 
//TCNT4L = 0xFF; 		//255+210*256 = 54015 to reach 65535 we need 11520 counts.

/*Apparently gives 0.04s gap 25Hz. Should have been 100Hz*/
TCNT4H = 0xF7; 			//247 
     862:	85 ea       	ldi	r24, 0xA5	; 165
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	27 ef       	ldi	r18, 0xF7	; 247
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
TCNT4L = 0x00; 			//0+247*256 = 63232 to reach 65535 we need 2303 counts.
     86c:	84 ea       	ldi	r24, 0xA4	; 164
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	10 82       	st	Z, r1

/*Apparently gives 0.01s gap. But random stuff creep in so we will keep 25Hz*/
//TCNT4H = 0xFD; 			//253 
//TCNT4L = 0xBF; 			//191+253*256 = 64959 to reach 65535 we need 577 counts.

TCCR4B =  0x04;			// Restarts clock with 64 prescaler
     874:	81 ea       	ldi	r24, 0xA1	; 161
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	24 e0       	ldi	r18, 0x04	; 4
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18

//Here we just need to send the encoder positions. 

USART_Transmit('A');					//'A' denotes the start of the sequence of data to be sent.
     87e:	81 e4       	ldi	r24, 0x41	; 65
     880:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <USART_Transmit>
USART_Transmit(ShaftCountRight/256);	//Sending the 4 bytes of encoder data.
     884:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ShaftCountRight>
     888:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ShaftCountRight+0x1>
     88c:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <ShaftCountRight+0x2>
     890:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <ShaftCountRight+0x3>
     894:	bb 23       	and	r27, r27
     896:	24 f4       	brge	.+8      	; 0x8a0 <__vector_45+0x7a>
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	9f 4f       	sbci	r25, 0xFF	; 255
     89c:	af 4f       	sbci	r26, 0xFF	; 255
     89e:	bf 4f       	sbci	r27, 0xFF	; 255
     8a0:	89 2f       	mov	r24, r25
     8a2:	9a 2f       	mov	r25, r26
     8a4:	ab 2f       	mov	r26, r27
     8a6:	bb 27       	eor	r27, r27
     8a8:	a7 fd       	sbrc	r26, 7
     8aa:	ba 95       	dec	r27
     8ac:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <USART_Transmit>
USART_Transmit(ShaftCountRight%256);
     8b0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ShaftCountRight>
     8b4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ShaftCountRight+0x1>
     8b8:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <ShaftCountRight+0x2>
     8bc:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <ShaftCountRight+0x3>
     8c0:	99 27       	eor	r25, r25
     8c2:	aa 27       	eor	r26, r26
     8c4:	b0 78       	andi	r27, 0x80	; 128
     8c6:	bb 23       	and	r27, r27
     8c8:	4c f4       	brge	.+18     	; 0x8dc <__vector_45+0xb6>
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	a1 09       	sbc	r26, r1
     8ce:	b1 09       	sbc	r27, r1
     8d0:	9f 6f       	ori	r25, 0xFF	; 255
     8d2:	af 6f       	ori	r26, 0xFF	; 255
     8d4:	bf 6f       	ori	r27, 0xFF	; 255
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	a1 1d       	adc	r26, r1
     8da:	b1 1d       	adc	r27, r1
     8dc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <USART_Transmit>
USART_Transmit(ShaftCountLeft/256);
     8e0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <ShaftCountLeft>
     8e4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <ShaftCountLeft+0x1>
     8e8:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <ShaftCountLeft+0x2>
     8ec:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <ShaftCountLeft+0x3>
     8f0:	bb 23       	and	r27, r27
     8f2:	24 f4       	brge	.+8      	; 0x8fc <__vector_45+0xd6>
     8f4:	81 50       	subi	r24, 0x01	; 1
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	af 4f       	sbci	r26, 0xFF	; 255
     8fa:	bf 4f       	sbci	r27, 0xFF	; 255
     8fc:	89 2f       	mov	r24, r25
     8fe:	9a 2f       	mov	r25, r26
     900:	ab 2f       	mov	r26, r27
     902:	bb 27       	eor	r27, r27
     904:	a7 fd       	sbrc	r26, 7
     906:	ba 95       	dec	r27
     908:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <USART_Transmit>
USART_Transmit(ShaftCountLeft%256);
     90c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <ShaftCountLeft>
     910:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <ShaftCountLeft+0x1>
     914:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <ShaftCountLeft+0x2>
     918:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <ShaftCountLeft+0x3>
     91c:	99 27       	eor	r25, r25
     91e:	aa 27       	eor	r26, r26
     920:	b0 78       	andi	r27, 0x80	; 128
     922:	bb 23       	and	r27, r27
     924:	4c f4       	brge	.+18     	; 0x938 <__vector_45+0x112>
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	a1 09       	sbc	r26, r1
     92a:	b1 09       	sbc	r27, r1
     92c:	9f 6f       	ori	r25, 0xFF	; 255
     92e:	af 6f       	ori	r26, 0xFF	; 255
     930:	bf 6f       	ori	r27, 0xFF	; 255
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	a1 1d       	adc	r26, r1
     936:	b1 1d       	adc	r27, r1
     938:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <USART_Transmit>
chksum=ShaftCountRight/256+ShaftCountRight%256+ShaftCountLeft/256+ShaftCountLeft%256; 
     93c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ShaftCountRight>
     940:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ShaftCountRight+0x1>
     944:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <ShaftCountRight+0x2>
     948:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <ShaftCountRight+0x3>
     94c:	bb 23       	and	r27, r27
     94e:	24 f4       	brge	.+8      	; 0x958 <__vector_45+0x132>
     950:	81 50       	subi	r24, 0x01	; 1
     952:	9f 4f       	sbci	r25, 0xFF	; 255
     954:	af 4f       	sbci	r26, 0xFF	; 255
     956:	bf 4f       	sbci	r27, 0xFF	; 255
     958:	89 2f       	mov	r24, r25
     95a:	9a 2f       	mov	r25, r26
     95c:	ab 2f       	mov	r26, r27
     95e:	bb 27       	eor	r27, r27
     960:	a7 fd       	sbrc	r26, 7
     962:	ba 95       	dec	r27
     964:	28 2f       	mov	r18, r24
     966:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ShaftCountRight>
     96a:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ShaftCountRight+0x1>
     96e:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <ShaftCountRight+0x2>
     972:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <ShaftCountRight+0x3>
     976:	99 27       	eor	r25, r25
     978:	aa 27       	eor	r26, r26
     97a:	b0 78       	andi	r27, 0x80	; 128
     97c:	bb 23       	and	r27, r27
     97e:	4c f4       	brge	.+18     	; 0x992 <__vector_45+0x16c>
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	a1 09       	sbc	r26, r1
     984:	b1 09       	sbc	r27, r1
     986:	9f 6f       	ori	r25, 0xFF	; 255
     988:	af 6f       	ori	r26, 0xFF	; 255
     98a:	bf 6f       	ori	r27, 0xFF	; 255
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	a1 1d       	adc	r26, r1
     990:	b1 1d       	adc	r27, r1
     992:	28 0f       	add	r18, r24
     994:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <ShaftCountLeft>
     998:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <ShaftCountLeft+0x1>
     99c:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <ShaftCountLeft+0x2>
     9a0:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <ShaftCountLeft+0x3>
     9a4:	bb 23       	and	r27, r27
     9a6:	24 f4       	brge	.+8      	; 0x9b0 <__vector_45+0x18a>
     9a8:	81 50       	subi	r24, 0x01	; 1
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	af 4f       	sbci	r26, 0xFF	; 255
     9ae:	bf 4f       	sbci	r27, 0xFF	; 255
     9b0:	89 2f       	mov	r24, r25
     9b2:	9a 2f       	mov	r25, r26
     9b4:	ab 2f       	mov	r26, r27
     9b6:	bb 27       	eor	r27, r27
     9b8:	a7 fd       	sbrc	r26, 7
     9ba:	ba 95       	dec	r27
     9bc:	28 0f       	add	r18, r24
     9be:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <ShaftCountLeft>
     9c2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <ShaftCountLeft+0x1>
     9c6:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <ShaftCountLeft+0x2>
     9ca:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <ShaftCountLeft+0x3>
     9ce:	99 27       	eor	r25, r25
     9d0:	aa 27       	eor	r26, r26
     9d2:	b0 78       	andi	r27, 0x80	; 128
     9d4:	bb 23       	and	r27, r27
     9d6:	4c f4       	brge	.+18     	; 0x9ea <__vector_45+0x1c4>
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	a1 09       	sbc	r26, r1
     9dc:	b1 09       	sbc	r27, r1
     9de:	9f 6f       	ori	r25, 0xFF	; 255
     9e0:	af 6f       	ori	r26, 0xFF	; 255
     9e2:	bf 6f       	ori	r27, 0xFF	; 255
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	a1 1d       	adc	r26, r1
     9e8:	b1 1d       	adc	r27, r1
     9ea:	82 0f       	add	r24, r18
     9ec:	89 83       	std	Y+1, r24	; 0x01
USART_Transmit(chksum);	//Send the calculated checksum for comparison and accuracy check.
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <USART_Transmit>
// USART_Transmit(value%256);
				

//ADC channel 4,5,6,7,8,9,10 are 7 IR proximity sensors and channel 11 is Sharp IR snesor
//Transmitting sensor data 
USART_Transmit(ADC_Conversion(14)/256);
     9f4:	8e e0       	ldi	r24, 0x0E	; 14
     9f6:	0e 94 87 01 	call	0x30e	; 0x30e <ADC_Conversion>
     9fa:	88 2f       	mov	r24, r24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	99 23       	and	r25, r25
     a00:	14 f4       	brge	.+4      	; 0xa06 <__vector_45+0x1e0>
     a02:	81 50       	subi	r24, 0x01	; 1
     a04:	9f 4f       	sbci	r25, 0xFF	; 255
     a06:	89 2f       	mov	r24, r25
     a08:	99 0f       	add	r25, r25
     a0a:	99 0b       	sbc	r25, r25
     a0c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <USART_Transmit>
USART_Transmit(ADC_Conversion(14)%256);
     a10:	8e e0       	ldi	r24, 0x0E	; 14
     a12:	0e 94 87 01 	call	0x30e	; 0x30e <ADC_Conversion>
     a16:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <USART_Transmit>
// USART_Transmit(ADC_Conversion(9));
// USART_Transmit(ADC_Conversion(10));
// USART_Transmit(ADC_Conversion(11));


}
     a1a:	00 00       	nop
     a1c:	0f 90       	pop	r0
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	ff 91       	pop	r31
     a24:	ef 91       	pop	r30
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	0f 90       	pop	r0
     a3c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     a40:	0f 90       	pop	r0
     a42:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     a46:	0f 90       	pop	r0
     a48:	1f 90       	pop	r1
     a4a:	18 95       	reti

00000a4c <__vector_6>:
**************************************************************************************************/


//ISR for right position encoder
ISR(INT5_vect)  
{
     a4c:	1f 92       	push	r1
     a4e:	0f 92       	push	r0
     a50:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
	if(FBR_Flag == 1)
     a68:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	a1 f4       	brne	.+40     	; 0xa98 <__vector_6+0x4c>
	ShaftCountRight++;			//increment right shaft position count for forward motion
     a70:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ShaftCountRight>
     a74:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ShaftCountRight+0x1>
     a78:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <ShaftCountRight+0x2>
     a7c:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <ShaftCountRight+0x3>
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	a1 1d       	adc	r26, r1
     a84:	b1 1d       	adc	r27, r1
     a86:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <ShaftCountRight>
     a8a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <ShaftCountRight+0x1>
     a8e:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <ShaftCountRight+0x2>
     a92:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <ShaftCountRight+0x3>
	else
	ShaftCountRight--;
}
     a96:	13 c0       	rjmp	.+38     	; 0xabe <__vector_6+0x72>
ISR(INT5_vect)  
{
	if(FBR_Flag == 1)
	ShaftCountRight++;			//increment right shaft position count for forward motion
	else
	ShaftCountRight--;
     a98:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ShaftCountRight>
     a9c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ShaftCountRight+0x1>
     aa0:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <ShaftCountRight+0x2>
     aa4:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <ShaftCountRight+0x3>
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	a1 09       	sbc	r26, r1
     aac:	b1 09       	sbc	r27, r1
     aae:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <ShaftCountRight>
     ab2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <ShaftCountRight+0x1>
     ab6:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <ShaftCountRight+0x2>
     aba:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <ShaftCountRight+0x3>
}
     abe:	00 00       	nop
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	bf 91       	pop	r27
     ac6:	af 91       	pop	r26
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	0f 90       	pop	r0
     ace:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_5>:

//ISR for left position encoder
ISR(INT4_vect)
{
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
	if(FBL_Flag == 1)
     af4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <FBL_Flag>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	a1 f4       	brne	.+40     	; 0xb24 <__vector_5+0x4c>
	ShaftCountLeft++;			//increment left shaft position count for forward motion
     afc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <ShaftCountLeft>
     b00:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <ShaftCountLeft+0x1>
     b04:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <ShaftCountLeft+0x2>
     b08:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <ShaftCountLeft+0x3>
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	a1 1d       	adc	r26, r1
     b10:	b1 1d       	adc	r27, r1
     b12:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <ShaftCountLeft>
     b16:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <ShaftCountLeft+0x1>
     b1a:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <ShaftCountLeft+0x2>
     b1e:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <ShaftCountLeft+0x3>
	else
	ShaftCountLeft--;			//decrement left shaft position count for backward motion			
}
     b22:	13 c0       	rjmp	.+38     	; 0xb4a <__vector_5+0x72>
ISR(INT4_vect)
{
	if(FBL_Flag == 1)
	ShaftCountLeft++;			//increment left shaft position count for forward motion
	else
	ShaftCountLeft--;			//decrement left shaft position count for backward motion			
     b24:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <ShaftCountLeft>
     b28:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <ShaftCountLeft+0x1>
     b2c:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <ShaftCountLeft+0x2>
     b30:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <ShaftCountLeft+0x3>
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	a1 09       	sbc	r26, r1
     b38:	b1 09       	sbc	r27, r1
     b3a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <ShaftCountLeft>
     b3e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <ShaftCountLeft+0x1>
     b42:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <ShaftCountLeft+0x2>
     b46:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <ShaftCountLeft+0x3>
}
     b4a:	00 00       	nop
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	0f 90       	pop	r0
     b5a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <main>:

//Main Function
int main(void)
{
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	init_devices();
     b6c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <init_devices>
	while(1)
	{	
		// BATT_Voltage = 0.55;
		// BATT_Voltage = ADC_Conversion(0);
		BATT_Voltage = (((ADC_Conversion(0))*0.07902) + 0.7)/15;
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 87 01 	call	0x30e	; 0x30e <ADC_Conversion>
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	09 2e       	mov	r0, r25
     b7c:	00 0c       	add	r0, r0
     b7e:	aa 0b       	sbc	r26, r26
     b80:	bb 0b       	sbc	r27, r27
     b82:	bc 01       	movw	r22, r24
     b84:	cd 01       	movw	r24, r26
     b86:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatsisf>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	2d e3       	ldi	r18, 0x3D	; 61
     b90:	35 ed       	ldi	r19, 0xD5	; 213
     b92:	41 ea       	ldi	r20, 0xA1	; 161
     b94:	5d e3       	ldi	r21, 0x3D	; 61
     b96:	bc 01       	movw	r22, r24
     b98:	cd 01       	movw	r24, r26
     b9a:	0e 94 67 08 	call	0x10ce	; 0x10ce <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	23 e3       	ldi	r18, 0x33	; 51
     ba4:	33 e3       	ldi	r19, 0x33	; 51
     ba6:	43 e3       	ldi	r20, 0x33	; 51
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	bc 01       	movw	r22, r24
     bac:	cd 01       	movw	r24, r26
     bae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__addsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e7       	ldi	r20, 0x70	; 112
     bbc:	51 e4       	ldi	r21, 0x41	; 65
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__divsf3>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BATT_Voltage>
     bce:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BATT_Voltage+0x1>
     bd2:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BATT_Voltage+0x2>
     bd6:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BATT_Voltage+0x3>
		
		if (BATT_Voltage < 0.50){
     bda:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BATT_Voltage>
     bde:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BATT_Voltage+0x1>
     be2:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BATT_Voltage+0x2>
     be6:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BATT_Voltage+0x3>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	5f e3       	ldi	r21, 0x3F	; 63
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 08 07 	call	0xe10	; 0xe10 <__cmpsf2>
     bfa:	88 23       	and	r24, r24
     bfc:	34 f4       	brge	.+12     	; 0xc0a <main+0xa6>
			PORTJ = 0x80; //Output is set to 1 bar
     bfe:	85 e0       	ldi	r24, 0x05	; 5
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	20 e8       	ldi	r18, 0x80	; 128
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
     c08:	b3 cf       	rjmp	.-154    	; 0xb70 <main+0xc>
		}
		else if (BATT_Voltage < 0.60){
     c0a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BATT_Voltage>
     c0e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BATT_Voltage+0x1>
     c12:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BATT_Voltage+0x2>
     c16:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BATT_Voltage+0x3>
     c1a:	2a e9       	ldi	r18, 0x9A	; 154
     c1c:	39 e9       	ldi	r19, 0x99	; 153
     c1e:	49 e1       	ldi	r20, 0x19	; 25
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 08 07 	call	0xe10	; 0xe10 <__cmpsf2>
     c2a:	88 23       	and	r24, r24
     c2c:	34 f4       	brge	.+12     	; 0xc3a <main+0xd6>
			PORTJ = 0xC0; //Output is set to 2 bars
     c2e:	85 e0       	ldi	r24, 0x05	; 5
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	20 ec       	ldi	r18, 0xC0	; 192
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
     c38:	9b cf       	rjmp	.-202    	; 0xb70 <main+0xc>
		}
		else if (BATT_Voltage < 0.65){
     c3a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BATT_Voltage>
     c3e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BATT_Voltage+0x1>
     c42:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BATT_Voltage+0x2>
     c46:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BATT_Voltage+0x3>
     c4a:	26 e6       	ldi	r18, 0x66	; 102
     c4c:	36 e6       	ldi	r19, 0x66	; 102
     c4e:	46 e2       	ldi	r20, 0x26	; 38
     c50:	5f e3       	ldi	r21, 0x3F	; 63
     c52:	bc 01       	movw	r22, r24
     c54:	cd 01       	movw	r24, r26
     c56:	0e 94 08 07 	call	0xe10	; 0xe10 <__cmpsf2>
     c5a:	88 23       	and	r24, r24
     c5c:	34 f4       	brge	.+12     	; 0xc6a <main+0x106>
			PORTJ = 0xE0; //Output is set to 3 bars
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	20 ee       	ldi	r18, 0xE0	; 224
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
     c68:	83 cf       	rjmp	.-250    	; 0xb70 <main+0xc>
		}
		else if (BATT_Voltage < 0.70){
     c6a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BATT_Voltage>
     c6e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BATT_Voltage+0x1>
     c72:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BATT_Voltage+0x2>
     c76:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BATT_Voltage+0x3>
     c7a:	23 e3       	ldi	r18, 0x33	; 51
     c7c:	33 e3       	ldi	r19, 0x33	; 51
     c7e:	43 e3       	ldi	r20, 0x33	; 51
     c80:	5f e3       	ldi	r21, 0x3F	; 63
     c82:	bc 01       	movw	r22, r24
     c84:	cd 01       	movw	r24, r26
     c86:	0e 94 08 07 	call	0xe10	; 0xe10 <__cmpsf2>
     c8a:	88 23       	and	r24, r24
     c8c:	34 f4       	brge	.+12     	; 0xc9a <main+0x136>
			PORTJ = 0xF0; //Output is set to 4 bars
     c8e:	85 e0       	ldi	r24, 0x05	; 5
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	20 ef       	ldi	r18, 0xF0	; 240
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
     c98:	6b cf       	rjmp	.-298    	; 0xb70 <main+0xc>
		}
		else if (BATT_Voltage < 0.75){
     c9a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BATT_Voltage>
     c9e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BATT_Voltage+0x1>
     ca2:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BATT_Voltage+0x2>
     ca6:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BATT_Voltage+0x3>
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e4       	ldi	r20, 0x40	; 64
     cb0:	5f e3       	ldi	r21, 0x3F	; 63
     cb2:	bc 01       	movw	r22, r24
     cb4:	cd 01       	movw	r24, r26
     cb6:	0e 94 08 07 	call	0xe10	; 0xe10 <__cmpsf2>
     cba:	88 23       	and	r24, r24
     cbc:	34 f4       	brge	.+12     	; 0xcca <main+0x166>
			PORTJ = 0xF8; //Output is set to 5 bars
     cbe:	85 e0       	ldi	r24, 0x05	; 5
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	28 ef       	ldi	r18, 0xF8	; 248
     cc4:	fc 01       	movw	r30, r24
     cc6:	20 83       	st	Z, r18
     cc8:	53 cf       	rjmp	.-346    	; 0xb70 <main+0xc>
		}
		else if (BATT_Voltage < 0.80){
     cca:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BATT_Voltage>
     cce:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BATT_Voltage+0x1>
     cd2:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BATT_Voltage+0x2>
     cd6:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BATT_Voltage+0x3>
     cda:	2d ec       	ldi	r18, 0xCD	; 205
     cdc:	3c ec       	ldi	r19, 0xCC	; 204
     cde:	4c e4       	ldi	r20, 0x4C	; 76
     ce0:	5f e3       	ldi	r21, 0x3F	; 63
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	0e 94 08 07 	call	0xe10	; 0xe10 <__cmpsf2>
     cea:	88 23       	and	r24, r24
     cec:	34 f4       	brge	.+12     	; 0xcfa <main+0x196>
			PORTJ = 0xFC; //Output is set to 6 bars
     cee:	85 e0       	ldi	r24, 0x05	; 5
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	2c ef       	ldi	r18, 0xFC	; 252
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
     cf8:	3b cf       	rjmp	.-394    	; 0xb70 <main+0xc>
		}
		else if (BATT_Voltage < 0.85){
     cfa:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BATT_Voltage>
     cfe:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BATT_Voltage+0x1>
     d02:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BATT_Voltage+0x2>
     d06:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BATT_Voltage+0x3>
     d0a:	2a e9       	ldi	r18, 0x9A	; 154
     d0c:	39 e9       	ldi	r19, 0x99	; 153
     d0e:	49 e5       	ldi	r20, 0x59	; 89
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	bc 01       	movw	r22, r24
     d14:	cd 01       	movw	r24, r26
     d16:	0e 94 08 07 	call	0xe10	; 0xe10 <__cmpsf2>
     d1a:	88 23       	and	r24, r24
     d1c:	34 f4       	brge	.+12     	; 0xd2a <main+0x1c6>
			PORTJ = 0xFE; //Output is set to 7 bars
     d1e:	85 e0       	ldi	r24, 0x05	; 5
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	2e ef       	ldi	r18, 0xFE	; 254
     d24:	fc 01       	movw	r30, r24
     d26:	20 83       	st	Z, r18
     d28:	23 cf       	rjmp	.-442    	; 0xb70 <main+0xc>
		}
		else {
			PORTJ = 0xFF; //Output is set to 8 bars
     d2a:	85 e0       	ldi	r24, 0x05	; 5
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	2f ef       	ldi	r18, 0xFF	; 255
     d30:	fc 01       	movw	r30, r24
     d32:	20 83       	st	Z, r18

		//USART_Transmit(23);
		//unsigned long measurement=256;
		//USART_Transmit(measurement/256); //Encoder measurements are 2-bytes long and require 2 bytes to be sent. 
		//USART_Transmit(measurement%256);		
	}
     d34:	1d cf       	rjmp	.-454    	; 0xb70 <main+0xc>

00000d36 <__subsf3>:
     d36:	50 58       	subi	r21, 0x80	; 128

00000d38 <__addsf3>:
     d38:	bb 27       	eor	r27, r27
     d3a:	aa 27       	eor	r26, r26
     d3c:	0e 94 b3 06 	call	0xd66	; 0xd66 <__addsf3x>
     d40:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__fp_round>
     d44:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscA>
     d48:	38 f0       	brcs	.+14     	; 0xd58 <__addsf3+0x20>
     d4a:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscB>
     d4e:	20 f0       	brcs	.+8      	; 0xd58 <__addsf3+0x20>
     d50:	39 f4       	brne	.+14     	; 0xd60 <__addsf3+0x28>
     d52:	9f 3f       	cpi	r25, 0xFF	; 255
     d54:	19 f4       	brne	.+6      	; 0xd5c <__addsf3+0x24>
     d56:	26 f4       	brtc	.+8      	; 0xd60 <__addsf3+0x28>
     d58:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_nan>
     d5c:	0e f4       	brtc	.+2      	; 0xd60 <__addsf3+0x28>
     d5e:	e0 95       	com	r30
     d60:	e7 fb       	bst	r30, 7
     d62:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_inf>

00000d66 <__addsf3x>:
     d66:	e9 2f       	mov	r30, r25
     d68:	0e 94 3e 08 	call	0x107c	; 0x107c <__fp_split3>
     d6c:	58 f3       	brcs	.-42     	; 0xd44 <__addsf3+0xc>
     d6e:	ba 17       	cp	r27, r26
     d70:	62 07       	cpc	r22, r18
     d72:	73 07       	cpc	r23, r19
     d74:	84 07       	cpc	r24, r20
     d76:	95 07       	cpc	r25, r21
     d78:	20 f0       	brcs	.+8      	; 0xd82 <__addsf3x+0x1c>
     d7a:	79 f4       	brne	.+30     	; 0xd9a <__addsf3x+0x34>
     d7c:	a6 f5       	brtc	.+104    	; 0xde6 <__addsf3x+0x80>
     d7e:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_zero>
     d82:	0e f4       	brtc	.+2      	; 0xd86 <__addsf3x+0x20>
     d84:	e0 95       	com	r30
     d86:	0b 2e       	mov	r0, r27
     d88:	ba 2f       	mov	r27, r26
     d8a:	a0 2d       	mov	r26, r0
     d8c:	0b 01       	movw	r0, r22
     d8e:	b9 01       	movw	r22, r18
     d90:	90 01       	movw	r18, r0
     d92:	0c 01       	movw	r0, r24
     d94:	ca 01       	movw	r24, r20
     d96:	a0 01       	movw	r20, r0
     d98:	11 24       	eor	r1, r1
     d9a:	ff 27       	eor	r31, r31
     d9c:	59 1b       	sub	r21, r25
     d9e:	99 f0       	breq	.+38     	; 0xdc6 <__addsf3x+0x60>
     da0:	59 3f       	cpi	r21, 0xF9	; 249
     da2:	50 f4       	brcc	.+20     	; 0xdb8 <__addsf3x+0x52>
     da4:	50 3e       	cpi	r21, 0xE0	; 224
     da6:	68 f1       	brcs	.+90     	; 0xe02 <__addsf3x+0x9c>
     da8:	1a 16       	cp	r1, r26
     daa:	f0 40       	sbci	r31, 0x00	; 0
     dac:	a2 2f       	mov	r26, r18
     dae:	23 2f       	mov	r18, r19
     db0:	34 2f       	mov	r19, r20
     db2:	44 27       	eor	r20, r20
     db4:	58 5f       	subi	r21, 0xF8	; 248
     db6:	f3 cf       	rjmp	.-26     	; 0xd9e <__addsf3x+0x38>
     db8:	46 95       	lsr	r20
     dba:	37 95       	ror	r19
     dbc:	27 95       	ror	r18
     dbe:	a7 95       	ror	r26
     dc0:	f0 40       	sbci	r31, 0x00	; 0
     dc2:	53 95       	inc	r21
     dc4:	c9 f7       	brne	.-14     	; 0xdb8 <__addsf3x+0x52>
     dc6:	7e f4       	brtc	.+30     	; 0xde6 <__addsf3x+0x80>
     dc8:	1f 16       	cp	r1, r31
     dca:	ba 0b       	sbc	r27, r26
     dcc:	62 0b       	sbc	r22, r18
     dce:	73 0b       	sbc	r23, r19
     dd0:	84 0b       	sbc	r24, r20
     dd2:	ba f0       	brmi	.+46     	; 0xe02 <__addsf3x+0x9c>
     dd4:	91 50       	subi	r25, 0x01	; 1
     dd6:	a1 f0       	breq	.+40     	; 0xe00 <__addsf3x+0x9a>
     dd8:	ff 0f       	add	r31, r31
     dda:	bb 1f       	adc	r27, r27
     ddc:	66 1f       	adc	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	88 1f       	adc	r24, r24
     de2:	c2 f7       	brpl	.-16     	; 0xdd4 <__addsf3x+0x6e>
     de4:	0e c0       	rjmp	.+28     	; 0xe02 <__addsf3x+0x9c>
     de6:	ba 0f       	add	r27, r26
     de8:	62 1f       	adc	r22, r18
     dea:	73 1f       	adc	r23, r19
     dec:	84 1f       	adc	r24, r20
     dee:	48 f4       	brcc	.+18     	; 0xe02 <__addsf3x+0x9c>
     df0:	87 95       	ror	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	b7 95       	ror	r27
     df8:	f7 95       	ror	r31
     dfa:	9e 3f       	cpi	r25, 0xFE	; 254
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <__addsf3x+0x9a>
     dfe:	b0 cf       	rjmp	.-160    	; 0xd60 <__addsf3+0x28>
     e00:	93 95       	inc	r25
     e02:	88 0f       	add	r24, r24
     e04:	08 f0       	brcs	.+2      	; 0xe08 <__addsf3x+0xa2>
     e06:	99 27       	eor	r25, r25
     e08:	ee 0f       	add	r30, r30
     e0a:	97 95       	ror	r25
     e0c:	87 95       	ror	r24
     e0e:	08 95       	ret

00000e10 <__cmpsf2>:
     e10:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_cmp>
     e14:	08 f4       	brcc	.+2      	; 0xe18 <__cmpsf2+0x8>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	08 95       	ret

00000e1a <__divsf3>:
     e1a:	0e 94 21 07 	call	0xe42	; 0xe42 <__divsf3x>
     e1e:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__fp_round>
     e22:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscB>
     e26:	58 f0       	brcs	.+22     	; 0xe3e <__divsf3+0x24>
     e28:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscA>
     e2c:	40 f0       	brcs	.+16     	; 0xe3e <__divsf3+0x24>
     e2e:	29 f4       	brne	.+10     	; 0xe3a <__divsf3+0x20>
     e30:	5f 3f       	cpi	r21, 0xFF	; 255
     e32:	29 f0       	breq	.+10     	; 0xe3e <__divsf3+0x24>
     e34:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_inf>
     e38:	51 11       	cpse	r21, r1
     e3a:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_szero>
     e3e:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_nan>

00000e42 <__divsf3x>:
     e42:	0e 94 3e 08 	call	0x107c	; 0x107c <__fp_split3>
     e46:	68 f3       	brcs	.-38     	; 0xe22 <__divsf3+0x8>

00000e48 <__divsf3_pse>:
     e48:	99 23       	and	r25, r25
     e4a:	b1 f3       	breq	.-20     	; 0xe38 <__divsf3+0x1e>
     e4c:	55 23       	and	r21, r21
     e4e:	91 f3       	breq	.-28     	; 0xe34 <__divsf3+0x1a>
     e50:	95 1b       	sub	r25, r21
     e52:	55 0b       	sbc	r21, r21
     e54:	bb 27       	eor	r27, r27
     e56:	aa 27       	eor	r26, r26
     e58:	62 17       	cp	r22, r18
     e5a:	73 07       	cpc	r23, r19
     e5c:	84 07       	cpc	r24, r20
     e5e:	38 f0       	brcs	.+14     	; 0xe6e <__divsf3_pse+0x26>
     e60:	9f 5f       	subi	r25, 0xFF	; 255
     e62:	5f 4f       	sbci	r21, 0xFF	; 255
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	44 1f       	adc	r20, r20
     e6a:	aa 1f       	adc	r26, r26
     e6c:	a9 f3       	breq	.-22     	; 0xe58 <__divsf3_pse+0x10>
     e6e:	35 d0       	rcall	.+106    	; 0xeda <__divsf3_pse+0x92>
     e70:	0e 2e       	mov	r0, r30
     e72:	3a f0       	brmi	.+14     	; 0xe82 <__divsf3_pse+0x3a>
     e74:	e0 e8       	ldi	r30, 0x80	; 128
     e76:	32 d0       	rcall	.+100    	; 0xedc <__divsf3_pse+0x94>
     e78:	91 50       	subi	r25, 0x01	; 1
     e7a:	50 40       	sbci	r21, 0x00	; 0
     e7c:	e6 95       	lsr	r30
     e7e:	00 1c       	adc	r0, r0
     e80:	ca f7       	brpl	.-14     	; 0xe74 <__divsf3_pse+0x2c>
     e82:	2b d0       	rcall	.+86     	; 0xeda <__divsf3_pse+0x92>
     e84:	fe 2f       	mov	r31, r30
     e86:	29 d0       	rcall	.+82     	; 0xeda <__divsf3_pse+0x92>
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	88 1f       	adc	r24, r24
     e8e:	bb 1f       	adc	r27, r27
     e90:	26 17       	cp	r18, r22
     e92:	37 07       	cpc	r19, r23
     e94:	48 07       	cpc	r20, r24
     e96:	ab 07       	cpc	r26, r27
     e98:	b0 e8       	ldi	r27, 0x80	; 128
     e9a:	09 f0       	breq	.+2      	; 0xe9e <__divsf3_pse+0x56>
     e9c:	bb 0b       	sbc	r27, r27
     e9e:	80 2d       	mov	r24, r0
     ea0:	bf 01       	movw	r22, r30
     ea2:	ff 27       	eor	r31, r31
     ea4:	93 58       	subi	r25, 0x83	; 131
     ea6:	5f 4f       	sbci	r21, 0xFF	; 255
     ea8:	3a f0       	brmi	.+14     	; 0xeb8 <__divsf3_pse+0x70>
     eaa:	9e 3f       	cpi	r25, 0xFE	; 254
     eac:	51 05       	cpc	r21, r1
     eae:	78 f0       	brcs	.+30     	; 0xece <__divsf3_pse+0x86>
     eb0:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_inf>
     eb4:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_szero>
     eb8:	5f 3f       	cpi	r21, 0xFF	; 255
     eba:	e4 f3       	brlt	.-8      	; 0xeb4 <__divsf3_pse+0x6c>
     ebc:	98 3e       	cpi	r25, 0xE8	; 232
     ebe:	d4 f3       	brlt	.-12     	; 0xeb4 <__divsf3_pse+0x6c>
     ec0:	86 95       	lsr	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b7 95       	ror	r27
     ec8:	f7 95       	ror	r31
     eca:	9f 5f       	subi	r25, 0xFF	; 255
     ecc:	c9 f7       	brne	.-14     	; 0xec0 <__divsf3_pse+0x78>
     ece:	88 0f       	add	r24, r24
     ed0:	91 1d       	adc	r25, r1
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	97 f9       	bld	r25, 7
     ed8:	08 95       	ret
     eda:	e1 e0       	ldi	r30, 0x01	; 1
     edc:	66 0f       	add	r22, r22
     ede:	77 1f       	adc	r23, r23
     ee0:	88 1f       	adc	r24, r24
     ee2:	bb 1f       	adc	r27, r27
     ee4:	62 17       	cp	r22, r18
     ee6:	73 07       	cpc	r23, r19
     ee8:	84 07       	cpc	r24, r20
     eea:	ba 07       	cpc	r27, r26
     eec:	20 f0       	brcs	.+8      	; 0xef6 <__divsf3_pse+0xae>
     eee:	62 1b       	sub	r22, r18
     ef0:	73 0b       	sbc	r23, r19
     ef2:	84 0b       	sbc	r24, r20
     ef4:	ba 0b       	sbc	r27, r26
     ef6:	ee 1f       	adc	r30, r30
     ef8:	88 f7       	brcc	.-30     	; 0xedc <__divsf3_pse+0x94>
     efa:	e0 95       	com	r30
     efc:	08 95       	ret

00000efe <__fixsfsi>:
     efe:	0e 94 86 07 	call	0xf0c	; 0xf0c <__fixunssfsi>
     f02:	68 94       	set
     f04:	b1 11       	cpse	r27, r1
     f06:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_szero>
     f0a:	08 95       	ret

00000f0c <__fixunssfsi>:
     f0c:	0e 94 46 08 	call	0x108c	; 0x108c <__fp_splitA>
     f10:	88 f0       	brcs	.+34     	; 0xf34 <__fixunssfsi+0x28>
     f12:	9f 57       	subi	r25, 0x7F	; 127
     f14:	98 f0       	brcs	.+38     	; 0xf3c <__fixunssfsi+0x30>
     f16:	b9 2f       	mov	r27, r25
     f18:	99 27       	eor	r25, r25
     f1a:	b7 51       	subi	r27, 0x17	; 23
     f1c:	b0 f0       	brcs	.+44     	; 0xf4a <__fixunssfsi+0x3e>
     f1e:	e1 f0       	breq	.+56     	; 0xf58 <__fixunssfsi+0x4c>
     f20:	66 0f       	add	r22, r22
     f22:	77 1f       	adc	r23, r23
     f24:	88 1f       	adc	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	1a f0       	brmi	.+6      	; 0xf30 <__fixunssfsi+0x24>
     f2a:	ba 95       	dec	r27
     f2c:	c9 f7       	brne	.-14     	; 0xf20 <__fixunssfsi+0x14>
     f2e:	14 c0       	rjmp	.+40     	; 0xf58 <__fixunssfsi+0x4c>
     f30:	b1 30       	cpi	r27, 0x01	; 1
     f32:	91 f0       	breq	.+36     	; 0xf58 <__fixunssfsi+0x4c>
     f34:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__fp_zero>
     f38:	b1 e0       	ldi	r27, 0x01	; 1
     f3a:	08 95       	ret
     f3c:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_zero>
     f40:	67 2f       	mov	r22, r23
     f42:	78 2f       	mov	r23, r24
     f44:	88 27       	eor	r24, r24
     f46:	b8 5f       	subi	r27, 0xF8	; 248
     f48:	39 f0       	breq	.+14     	; 0xf58 <__fixunssfsi+0x4c>
     f4a:	b9 3f       	cpi	r27, 0xF9	; 249
     f4c:	cc f3       	brlt	.-14     	; 0xf40 <__fixunssfsi+0x34>
     f4e:	86 95       	lsr	r24
     f50:	77 95       	ror	r23
     f52:	67 95       	ror	r22
     f54:	b3 95       	inc	r27
     f56:	d9 f7       	brne	.-10     	; 0xf4e <__fixunssfsi+0x42>
     f58:	3e f4       	brtc	.+14     	; 0xf68 <__fixunssfsi+0x5c>
     f5a:	90 95       	com	r25
     f5c:	80 95       	com	r24
     f5e:	70 95       	com	r23
     f60:	61 95       	neg	r22
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	8f 4f       	sbci	r24, 0xFF	; 255
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	08 95       	ret

00000f6a <__floatunsisf>:
     f6a:	e8 94       	clt
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <__floatsisf+0x12>

00000f6e <__floatsisf>:
     f6e:	97 fb       	bst	r25, 7
     f70:	3e f4       	brtc	.+14     	; 0xf80 <__floatsisf+0x12>
     f72:	90 95       	com	r25
     f74:	80 95       	com	r24
     f76:	70 95       	com	r23
     f78:	61 95       	neg	r22
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	99 23       	and	r25, r25
     f82:	a9 f0       	breq	.+42     	; 0xfae <__floatsisf+0x40>
     f84:	f9 2f       	mov	r31, r25
     f86:	96 e9       	ldi	r25, 0x96	; 150
     f88:	bb 27       	eor	r27, r27
     f8a:	93 95       	inc	r25
     f8c:	f6 95       	lsr	r31
     f8e:	87 95       	ror	r24
     f90:	77 95       	ror	r23
     f92:	67 95       	ror	r22
     f94:	b7 95       	ror	r27
     f96:	f1 11       	cpse	r31, r1
     f98:	f8 cf       	rjmp	.-16     	; 0xf8a <__floatsisf+0x1c>
     f9a:	fa f4       	brpl	.+62     	; 0xfda <__floatsisf+0x6c>
     f9c:	bb 0f       	add	r27, r27
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__floatsisf+0x36>
     fa0:	60 ff       	sbrs	r22, 0
     fa2:	1b c0       	rjmp	.+54     	; 0xfda <__floatsisf+0x6c>
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	16 c0       	rjmp	.+44     	; 0xfda <__floatsisf+0x6c>
     fae:	88 23       	and	r24, r24
     fb0:	11 f0       	breq	.+4      	; 0xfb6 <__floatsisf+0x48>
     fb2:	96 e9       	ldi	r25, 0x96	; 150
     fb4:	11 c0       	rjmp	.+34     	; 0xfd8 <__floatsisf+0x6a>
     fb6:	77 23       	and	r23, r23
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <__floatsisf+0x54>
     fba:	9e e8       	ldi	r25, 0x8E	; 142
     fbc:	87 2f       	mov	r24, r23
     fbe:	76 2f       	mov	r23, r22
     fc0:	05 c0       	rjmp	.+10     	; 0xfcc <__floatsisf+0x5e>
     fc2:	66 23       	and	r22, r22
     fc4:	71 f0       	breq	.+28     	; 0xfe2 <__floatsisf+0x74>
     fc6:	96 e8       	ldi	r25, 0x86	; 134
     fc8:	86 2f       	mov	r24, r22
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	2a f0       	brmi	.+10     	; 0xfda <__floatsisf+0x6c>
     fd0:	9a 95       	dec	r25
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	da f7       	brpl	.-10     	; 0xfd0 <__floatsisf+0x62>
     fda:	88 0f       	add	r24, r24
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	97 f9       	bld	r25, 7
     fe2:	08 95       	ret

00000fe4 <__fp_cmp>:
     fe4:	99 0f       	add	r25, r25
     fe6:	00 08       	sbc	r0, r0
     fe8:	55 0f       	add	r21, r21
     fea:	aa 0b       	sbc	r26, r26
     fec:	e0 e8       	ldi	r30, 0x80	; 128
     fee:	fe ef       	ldi	r31, 0xFE	; 254
     ff0:	16 16       	cp	r1, r22
     ff2:	17 06       	cpc	r1, r23
     ff4:	e8 07       	cpc	r30, r24
     ff6:	f9 07       	cpc	r31, r25
     ff8:	c0 f0       	brcs	.+48     	; 0x102a <__fp_cmp+0x46>
     ffa:	12 16       	cp	r1, r18
     ffc:	13 06       	cpc	r1, r19
     ffe:	e4 07       	cpc	r30, r20
    1000:	f5 07       	cpc	r31, r21
    1002:	98 f0       	brcs	.+38     	; 0x102a <__fp_cmp+0x46>
    1004:	62 1b       	sub	r22, r18
    1006:	73 0b       	sbc	r23, r19
    1008:	84 0b       	sbc	r24, r20
    100a:	95 0b       	sbc	r25, r21
    100c:	39 f4       	brne	.+14     	; 0x101c <__fp_cmp+0x38>
    100e:	0a 26       	eor	r0, r26
    1010:	61 f0       	breq	.+24     	; 0x102a <__fp_cmp+0x46>
    1012:	23 2b       	or	r18, r19
    1014:	24 2b       	or	r18, r20
    1016:	25 2b       	or	r18, r21
    1018:	21 f4       	brne	.+8      	; 0x1022 <__fp_cmp+0x3e>
    101a:	08 95       	ret
    101c:	0a 26       	eor	r0, r26
    101e:	09 f4       	brne	.+2      	; 0x1022 <__fp_cmp+0x3e>
    1020:	a1 40       	sbci	r26, 0x01	; 1
    1022:	a6 95       	lsr	r26
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	81 1d       	adc	r24, r1
    1028:	81 1d       	adc	r24, r1
    102a:	08 95       	ret

0000102c <__fp_inf>:
    102c:	97 f9       	bld	r25, 7
    102e:	9f 67       	ori	r25, 0x7F	; 127
    1030:	80 e8       	ldi	r24, 0x80	; 128
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	08 95       	ret

00001038 <__fp_nan>:
    1038:	9f ef       	ldi	r25, 0xFF	; 255
    103a:	80 ec       	ldi	r24, 0xC0	; 192
    103c:	08 95       	ret

0000103e <__fp_pscA>:
    103e:	00 24       	eor	r0, r0
    1040:	0a 94       	dec	r0
    1042:	16 16       	cp	r1, r22
    1044:	17 06       	cpc	r1, r23
    1046:	18 06       	cpc	r1, r24
    1048:	09 06       	cpc	r0, r25
    104a:	08 95       	ret

0000104c <__fp_pscB>:
    104c:	00 24       	eor	r0, r0
    104e:	0a 94       	dec	r0
    1050:	12 16       	cp	r1, r18
    1052:	13 06       	cpc	r1, r19
    1054:	14 06       	cpc	r1, r20
    1056:	05 06       	cpc	r0, r21
    1058:	08 95       	ret

0000105a <__fp_round>:
    105a:	09 2e       	mov	r0, r25
    105c:	03 94       	inc	r0
    105e:	00 0c       	add	r0, r0
    1060:	11 f4       	brne	.+4      	; 0x1066 <__fp_round+0xc>
    1062:	88 23       	and	r24, r24
    1064:	52 f0       	brmi	.+20     	; 0x107a <__fp_round+0x20>
    1066:	bb 0f       	add	r27, r27
    1068:	40 f4       	brcc	.+16     	; 0x107a <__fp_round+0x20>
    106a:	bf 2b       	or	r27, r31
    106c:	11 f4       	brne	.+4      	; 0x1072 <__fp_round+0x18>
    106e:	60 ff       	sbrs	r22, 0
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__fp_round+0x20>
    1072:	6f 5f       	subi	r22, 0xFF	; 255
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
    1076:	8f 4f       	sbci	r24, 0xFF	; 255
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
    107a:	08 95       	ret

0000107c <__fp_split3>:
    107c:	57 fd       	sbrc	r21, 7
    107e:	90 58       	subi	r25, 0x80	; 128
    1080:	44 0f       	add	r20, r20
    1082:	55 1f       	adc	r21, r21
    1084:	59 f0       	breq	.+22     	; 0x109c <__fp_splitA+0x10>
    1086:	5f 3f       	cpi	r21, 0xFF	; 255
    1088:	71 f0       	breq	.+28     	; 0x10a6 <__fp_splitA+0x1a>
    108a:	47 95       	ror	r20

0000108c <__fp_splitA>:
    108c:	88 0f       	add	r24, r24
    108e:	97 fb       	bst	r25, 7
    1090:	99 1f       	adc	r25, r25
    1092:	61 f0       	breq	.+24     	; 0x10ac <__fp_splitA+0x20>
    1094:	9f 3f       	cpi	r25, 0xFF	; 255
    1096:	79 f0       	breq	.+30     	; 0x10b6 <__fp_splitA+0x2a>
    1098:	87 95       	ror	r24
    109a:	08 95       	ret
    109c:	12 16       	cp	r1, r18
    109e:	13 06       	cpc	r1, r19
    10a0:	14 06       	cpc	r1, r20
    10a2:	55 1f       	adc	r21, r21
    10a4:	f2 cf       	rjmp	.-28     	; 0x108a <__fp_split3+0xe>
    10a6:	46 95       	lsr	r20
    10a8:	f1 df       	rcall	.-30     	; 0x108c <__fp_splitA>
    10aa:	08 c0       	rjmp	.+16     	; 0x10bc <__fp_splitA+0x30>
    10ac:	16 16       	cp	r1, r22
    10ae:	17 06       	cpc	r1, r23
    10b0:	18 06       	cpc	r1, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	f1 cf       	rjmp	.-30     	; 0x1098 <__fp_splitA+0xc>
    10b6:	86 95       	lsr	r24
    10b8:	71 05       	cpc	r23, r1
    10ba:	61 05       	cpc	r22, r1
    10bc:	08 94       	sec
    10be:	08 95       	ret

000010c0 <__fp_zero>:
    10c0:	e8 94       	clt

000010c2 <__fp_szero>:
    10c2:	bb 27       	eor	r27, r27
    10c4:	66 27       	eor	r22, r22
    10c6:	77 27       	eor	r23, r23
    10c8:	cb 01       	movw	r24, r22
    10ca:	97 f9       	bld	r25, 7
    10cc:	08 95       	ret

000010ce <__mulsf3>:
    10ce:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__mulsf3x>
    10d2:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__fp_round>
    10d6:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscA>
    10da:	38 f0       	brcs	.+14     	; 0x10ea <__mulsf3+0x1c>
    10dc:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscB>
    10e0:	20 f0       	brcs	.+8      	; 0x10ea <__mulsf3+0x1c>
    10e2:	95 23       	and	r25, r21
    10e4:	11 f0       	breq	.+4      	; 0x10ea <__mulsf3+0x1c>
    10e6:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_inf>
    10ea:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_nan>
    10ee:	11 24       	eor	r1, r1
    10f0:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_szero>

000010f4 <__mulsf3x>:
    10f4:	0e 94 3e 08 	call	0x107c	; 0x107c <__fp_split3>
    10f8:	70 f3       	brcs	.-36     	; 0x10d6 <__mulsf3+0x8>

000010fa <__mulsf3_pse>:
    10fa:	95 9f       	mul	r25, r21
    10fc:	c1 f3       	breq	.-16     	; 0x10ee <__mulsf3+0x20>
    10fe:	95 0f       	add	r25, r21
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	55 1f       	adc	r21, r21
    1104:	62 9f       	mul	r22, r18
    1106:	f0 01       	movw	r30, r0
    1108:	72 9f       	mul	r23, r18
    110a:	bb 27       	eor	r27, r27
    110c:	f0 0d       	add	r31, r0
    110e:	b1 1d       	adc	r27, r1
    1110:	63 9f       	mul	r22, r19
    1112:	aa 27       	eor	r26, r26
    1114:	f0 0d       	add	r31, r0
    1116:	b1 1d       	adc	r27, r1
    1118:	aa 1f       	adc	r26, r26
    111a:	64 9f       	mul	r22, r20
    111c:	66 27       	eor	r22, r22
    111e:	b0 0d       	add	r27, r0
    1120:	a1 1d       	adc	r26, r1
    1122:	66 1f       	adc	r22, r22
    1124:	82 9f       	mul	r24, r18
    1126:	22 27       	eor	r18, r18
    1128:	b0 0d       	add	r27, r0
    112a:	a1 1d       	adc	r26, r1
    112c:	62 1f       	adc	r22, r18
    112e:	73 9f       	mul	r23, r19
    1130:	b0 0d       	add	r27, r0
    1132:	a1 1d       	adc	r26, r1
    1134:	62 1f       	adc	r22, r18
    1136:	83 9f       	mul	r24, r19
    1138:	a0 0d       	add	r26, r0
    113a:	61 1d       	adc	r22, r1
    113c:	22 1f       	adc	r18, r18
    113e:	74 9f       	mul	r23, r20
    1140:	33 27       	eor	r19, r19
    1142:	a0 0d       	add	r26, r0
    1144:	61 1d       	adc	r22, r1
    1146:	23 1f       	adc	r18, r19
    1148:	84 9f       	mul	r24, r20
    114a:	60 0d       	add	r22, r0
    114c:	21 1d       	adc	r18, r1
    114e:	82 2f       	mov	r24, r18
    1150:	76 2f       	mov	r23, r22
    1152:	6a 2f       	mov	r22, r26
    1154:	11 24       	eor	r1, r1
    1156:	9f 57       	subi	r25, 0x7F	; 127
    1158:	50 40       	sbci	r21, 0x00	; 0
    115a:	9a f0       	brmi	.+38     	; 0x1182 <__mulsf3_pse+0x88>
    115c:	f1 f0       	breq	.+60     	; 0x119a <__mulsf3_pse+0xa0>
    115e:	88 23       	and	r24, r24
    1160:	4a f0       	brmi	.+18     	; 0x1174 <__mulsf3_pse+0x7a>
    1162:	ee 0f       	add	r30, r30
    1164:	ff 1f       	adc	r31, r31
    1166:	bb 1f       	adc	r27, r27
    1168:	66 1f       	adc	r22, r22
    116a:	77 1f       	adc	r23, r23
    116c:	88 1f       	adc	r24, r24
    116e:	91 50       	subi	r25, 0x01	; 1
    1170:	50 40       	sbci	r21, 0x00	; 0
    1172:	a9 f7       	brne	.-22     	; 0x115e <__mulsf3_pse+0x64>
    1174:	9e 3f       	cpi	r25, 0xFE	; 254
    1176:	51 05       	cpc	r21, r1
    1178:	80 f0       	brcs	.+32     	; 0x119a <__mulsf3_pse+0xa0>
    117a:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_inf>
    117e:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_szero>
    1182:	5f 3f       	cpi	r21, 0xFF	; 255
    1184:	e4 f3       	brlt	.-8      	; 0x117e <__mulsf3_pse+0x84>
    1186:	98 3e       	cpi	r25, 0xE8	; 232
    1188:	d4 f3       	brlt	.-12     	; 0x117e <__mulsf3_pse+0x84>
    118a:	86 95       	lsr	r24
    118c:	77 95       	ror	r23
    118e:	67 95       	ror	r22
    1190:	b7 95       	ror	r27
    1192:	f7 95       	ror	r31
    1194:	e7 95       	ror	r30
    1196:	9f 5f       	subi	r25, 0xFF	; 255
    1198:	c1 f7       	brne	.-16     	; 0x118a <__mulsf3_pse+0x90>
    119a:	fe 2b       	or	r31, r30
    119c:	88 0f       	add	r24, r24
    119e:	91 1d       	adc	r25, r1
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	97 f9       	bld	r25, 7
    11a6:	08 95       	ret

000011a8 <_exit>:
    11a8:	f8 94       	cli

000011aa <__stop_program>:
    11aa:	ff cf       	rjmp	.-2      	; 0x11aa <__stop_program>
